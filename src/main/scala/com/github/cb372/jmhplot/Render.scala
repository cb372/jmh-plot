package com.github.cb372.jmhplot

object Render:

  def render(
      rows: List[BenchmarkRow],
      title: String,
      scoreDescription: ScoreDescription,
      format: OutputFormat
  ): String =
    s"""|# Generated by jmh-plot
        |
        |${renderFormat(format)}
        |
        |$$Data <<EOD
        |# benchmark score error
        |${rows.map(renderRow).mkString("\n")}
        |EOD
        |
        |set title "$title" font "arial,16"
        |unset key
        |
        |set grid y
        |set ylabel "${renderYLabel(scoreDescription)}" font "arial,14"
        |
        |set boxwidth 0.9 absolute
        |set style fill solid 0.75
        |set offset 0.7,0.7,0,0
        |set xtics rotate by -45
        |set palette defined ( 0 "blue", 0.5 "green", 1 "red" )
        |unset colorbox
        |
        |plot $$Data using ($$0):2:3:($$0):xtic(1) with boxerrorbars lc palette z
        |""".stripMargin

  private def renderFormat(format: OutputFormat): String = format match
    case OutputFormat.Qt => "set terminal qt"
    case OutputFormat.Png(filename) =>
      s"""|set terminal pngcairo enhanced size 1024,768
          |set output "$filename"""".stripMargin
    case OutputFormat.Svg(filename) =>
      s"""|set terminal svg enhanced
          |set output "$filename"""".stripMargin

  private def renderRow(row: BenchmarkRow): String =
    s"${row.name} ${row.score} ${row.error}"

  private def renderYLabel(scoreDescription: ScoreDescription): String =
    val label = scoreDescription.mode match
      case BenchmarkMode.Throughput     => "Throughput"
      case BenchmarkMode.AverageTime    => "Average time"
      case BenchmarkMode.SampleTime     => "Sampled time"
      case BenchmarkMode.SingleShotTime => "Single-shot time"

    s"$label (${scoreDescription.unit})"
